.program ook
SET PINS 1
SET PINS 0

.wrap_target
    OUT PINS, 1
.wrap


% c-sdk {

#include "hardware/clocks.h"
#include "hardware/gpio.h"


static PIO ook_pio;
static uint ook_gpio;

static uint ook_sm;


static inline void ook_init(PIO pio, uint gpio) {
    ook_pio = pio;
    ook_gpio = gpio;

    // Claim a state machine, panic if we can't get one.
    ook_sm = pio_claim_unused_sm(ook_pio, true);

    // Use 1 gpio, starting at `ook_gpio`, and set it to output.
    pio_sm_set_consecutive_pindirs(ook_pio, ook_sm, ook_gpio, 1, true);
}


static inline void ook_start(uint microseconds_per_bit) {
    pio_sm_config c = ook_program_get_default_config(0);

    sm_config_set_out_pins(&c, ook_gpio, 1); // for OUT
    sm_config_set_set_pins(&c, ook_gpio, 1); // for SET

    // shift to left, autopull enabled, shift 32 bits before replenishing from TX FIFO
    sm_config_set_out_shift(&c, false, true, 32);

    // shift to left, autopull disabled, shift 32 bits before replenishing from TX FIFO
    // sm_config_set_out_shift(&c, false, false, 32);

    // don't join FIFOs
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_NONE);

    //
    // Set the clock divider of this PIO instance such that each clock
    // cycle takes `microseconds_per_bit`.  The system clock runs at
    // 125 MHz by default.
    //
    // sysclk / div = 1e6 / microseconds_per_bit
    // div = (sysclk * microseconds_per_bit) / 1e6
    //
    uint32_t sysclk_hz = clock_get_hz(clk_sys);
    uint32_t div32 = (((sysclk_hz/1000) * microseconds_per_bit) / 1000);
    sm_config_set_clkdiv_int_frac(&c, div32, 0);

    pio_sm_init(ook_pio, ook_sm, 0, &c);

    pio_sm_set_enabled(ook_pio, ook_sm, true);
}


static void ook_send(uint32_t data) {
    pio_sm_put_blocking(ook_pio, ook_sm, data);
}

%}
